mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
data <- reactive({
validate(
need(input$data != "", label = "data set")
)
get(input$data, 'package:datasets')
})
output$plot <- renderPlot({
hist(data()[, 1], col = 'forestgreen', border = 'white')
})
output$table <- renderTable({
head(data())
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
library(shiny)
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
data <- reactive({
validate(
need(input$data != "", label = "data set")
)
get(input$data, 'package:datasets')
})
output$plot <- renderPlot({
hist(data()[, 1], col = 'forestgreen', border = 'white')
})
output$table <- renderTable({
head(data())
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
data <- reactive({
validate(
need(input$data != "", label = "data set")
)
get(input$data, 'test')
})
output$plot <- renderPlot({
hist(data()[, 1], col = 'forestgreen', border = 'white')
})
output$table <- renderTable({
head(data())
})
}
shinyApp(ui, server)
# Explore contributions of stations with input id ----
UsrInputID = reactive({
validate(
need(length(uq.roots[unlist(lapply(IdsPerRoot,function(x) input$stationID %in% x)))==1, label = "Input Id")
)
get(input$stationID)
})
observeEvent(input$stationID,{
expl_rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) input$stationID %in% x))]
if(length(expl_rootId)==0){
}
# extract spot data
expl_spotData = CWdata[CWdata$root_id==expl_rootId,]
# define type of observation (WL, SM, PP , TS)
expl_osType = unique(expl_spotData$topic_id)[1] # to avoid errors if there are multiple categories in the vector (which should not be possible)
# create the text output
output$expl_statRootID <- renderText({paste0("The root spot id is: ",expl_rootId) })
# download root image and latest update
output$expl_thisImg <-
renderText({
c('<div class="container"><img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==input$stationID],'.jpg alt="latest spot image" width="50%;"'),
'/><div class="bottom-right">',format(expl_spotData$created_at[expl_spotData$Spot_ID==input$stationID], "%d.%m.%Y %H:%M:%S"),'</div>'
)
})
output$expl_rootImg <-
renderText({
c('<div class="container"><img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==expl_rootId],'.jpg alt="root image" width="50%;"'),
'/><div class="bottom-right">',format(expl_spotData$created_at[expl_spotData$Spot_ID==expl_rootId], "%d.%m.%Y %H:%M:%S"),'</div>'
)
})
output$expl_latestImg <-
renderText({
c('<div class="container"><img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[length(expl_spotData$image)],'.jpg alt="latest spot image" width="50%;"'),
'/><div class="bottom-right">',format(expl_spotData$created_at[length(expl_spotData$image)], "%d.%m.%Y %H:%M:%S"),'</div>'
)
})
# make chart of timeseries
# water level	= 470 fld_05_00000066
# soil moisture = 469 fld_05_00000052
# temporary stream =	468 fld_05_00000051
# plastic pollution =	1919 fld_05_00000286 (nr. of pieces)
expl_plt = ggplot(data=expl_spotData,aes(x=as.Date(created_at)))+
scale_x_date(date_labels = "%B %Y")
if(expl_spotData$category[1]==470){
expl_plt = expl_plt +
geom_point(color = "#00AFBB",aes(y=expl_spotData$Streamlevel))+
geom_line(color = "#00AFBB", alpha = 0.5,aes(y=expl_spotData$Streamlevel))+
xlab('')+ylab('Water level class')
}else if (expl_spotData$category[1]==469){
ylabs = seq(min(expl_spotData$SMnr),max(expl_spotData$SMnr),by=1)
expl_plt = expl_plt + geom_point(color = "#FC4E07",aes(y=expl_spotData$SMnr))+
geom_line(color = "#FC4E07", alpha = 0.5,aes(y=expl_spotData$SMnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) SM_LUT$SMInput[SM_LUT$SMnr==x])))+
geom_rect(ymin=7.5,ymax=8.5,xmin=min(as.Date(expl_spotData$created_at)),xmax=max(as.Date(expl_spotData$created_at)),fill = "grey50",alpha=0.01)+
xlab('')+ylab('Soil Moisture Category')
}else if (expl_spotData$category[1]==468){
ylabs = seq(min(expl_spotData$TSnr),max(expl_spotData$TSnr),by=1)
expl_plt = expl_plt + geom_point(color = "#0ADF91",aes(y=expl_spotData$TSnr))+
geom_line(color = "#0ADF91", alpha = 0.5,aes(y=expl_spotData$TSnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) TS_LUT$TSInput[TS_LUT$TSnr==x])))+
xlab('')+ylab('Temporary Stream Status')
}else if (expl_spotData$category[1]==1919){
ylabs = seq(min(expl_spotData$PPnr),max(expl_spotData$PPnr),by=1)
expl_plt = expl_plt + geom_point(color = "#901AC3",aes(y=expl_spotData$PPnr))+
geom_line(color = "#901AC3", alpha = 0.5,aes(y=expl_spotData$PPnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) PP_LUT$PPInput[PP_LUT$PPnr==x])))+
xlab('')+ylab('Plastic Pollution amount')
}
expl_plt = expl_plt +theme_minimal()+ theme(
rect=element_blank(),
panel.grid = element_blank(),
panel.background= element_blank(),
plot.background = element_blank())
output$expl_timelinePlot <- renderPlot({expl_plt}, bg="transparent", execOnResize = TRUE)
rm(expl_plt)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# download root image and latest update
output$expl_thisImg <-
renderText({
c('<div class="container"><img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==input$stationID],'.jpg alt="latest spot image" width="50%;"'),
'/><div class="bottom-right">',format(expl_spotData$created_at[expl_spotData$Spot_ID==input$stationID], "%d.%m.%Y %H:%M:%S"),'</div>'
)
})
shiny::runApp()
runApp()
runApp()
UsrInputID
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
length(expl_rootId) == 1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
if(file.exists(paste0("CWdata/",locFile4Attempt))){
CWdataFull = read.csv(paste0("CWdata/",locFile4Attempt))
latestUpdate = CWdataFull$created_at[nrow(CWdataFull)]
newCWdata = Download_LatestCWdata_from_API(lastDate = latestUpdate)
if(!is.null(newCWdata)){
colnames(newCWdata)[1]='Spot_ID'
CWdataFull = rbind(CWdataFull,newCWdata)
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
}else{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
CWdata = CWdataFull # select all CW data
locFile4Attempt = 'CW_Data.csv'
observeEvent(input$reloadAllCWdata,{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
js$refresh()
})
if(file.exists(paste0("CWdata/",locFile4Attempt))){
CWdataFull = read.csv(paste0("CWdata/",locFile4Attempt))
latestUpdate = CWdataFull$created_at[nrow(CWdataFull)]
newCWdata = Download_LatestCWdata_from_API(lastDate = latestUpdate)
if(!is.null(newCWdata)){
colnames(newCWdata)[1]='Spot_ID'
CWdataFull = rbind(CWdataFull,newCWdata)
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
}else{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
CWdata = CWdataFull # select all CW data
# Base data manipulations for dashboard ----
CWdata$created_at = as.POSIXlt(CWdata$created_at,format = '%Y-%m-%d %H:%M:%S',tz='GMT',usetz=T)
uq.dates = unique(CWdata$created_at)
uq.roots = unique(CWdata$root_id)
uq.users = unique(CWdata$spotted_by)
# the start date is approximately when the app was officially launched, there are some pics from earlier dates that were added manually by us
dateSeries = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.dates)+3600,by='1 day')
attr(dateSeries,"tzone") = 'GMT'
# cumsums at dates and Root IDs with corresponding updates
cumSums = sapply(dateSeries,function(x) length(CWdata$Spot_ID[CWdata$created_at<=x]))
cumSumUsers = sapply(dateSeries,function(x) length(unique(CWdata$spotted_by[CWdata$created_at<=x])))
IdsPerRoot = sapply(uq.roots,function(x) CWdata$Spot_ID[CWdata$root_id==x])
IdsPerUser = sapply(uq.users,function(x) CWdata$Spot_ID[CWdata$spotted_by==x])
# for the slider further below
maxcontribs = max(sapply(IdsPerRoot, function(x) length(x)))
maxcontribUser = max(sapply(IdsPerUser, function(x) length(x)))
# for intermittent streams
CWdataTS = CWdata[CWdata$category==468,]
IdsPerRootTS = sapply(uq.roots,function(x) CWdataTS$Spot_ID[CWdataTS$root_id==x])
IdsPerUserTS = sapply(uq.users,function(x) CWdataTS$Spot_ID[CWdataTS$spotted_by==x])
expl_rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) 158754 %in% x))]
expl_rootId
length(expl_rootId)
shiny::validate(
need(length(expl_rootId) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
)
need(length(expl_rootId) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
test = shiny::validate(
need(length(expl_rootId) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
)
test
test = shiny::validate(
need(length(c(1,3,4)) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
)
expl_rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) input$stationID %in% x))]
shiny::validate(
need(length(expl_rootId) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
)
# extract spot data
expl_spotData = CWdata[CWdata$root_id==expl_rootId,]
# define type of observation (WL, SM, PP , TS)
expl_osType = unique(expl_spotData$topic_id)[1] # to avoid errors if there are multiple categories in the vector (which should not be possible)
runApp()
runApp()
need(length(expl_rootId) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
need(length(expl_rootId) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
need(length(expl_rootId) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
1+1
need(length(c(1,3)) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
runApp()
expl_spotData$category[1]
runApp()
runApp()
exists(expl_rootId)
# shiny::validate(
#   # need(length(expl_rootId) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
#   if(!(length(expl_rootId) == 1)){
#     message("Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
#   }
# )
# extract spot data
if(exists("expl_rootId"))
exists("expl_rootId")
runApp()
expl_rootId
runApp()
expl_rootId = NULL
expl_rootId
expl_rootId=length(0)
expl_rootId
expl_rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) "bla" %in% x))]
expl_rootId
need(length(expl_rootId) == 1,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot).")
# extract spot data
expl_spotData = CWdata[CWdata$root_id==expl_rootId,]
# define type of observation (WL, SM, PP , TS)
expl_osType = unique(expl_spotData$topic_id)[1] # to avoid errors if there are multiple categories in the vector (which should not be possible)
expl_osType
expl_spotData
expl_spotData$image
nrow(expl_spotData$image)
nrow(expl_spotData$image) >
0
nrow(expl_spotData$image)
nrow(expl_spotData)
nrow(expl_spotData) > 0
runApp()
# make chart of timeseries
# water level	= 470 fld_05_00000066
# soil moisture = 469 fld_05_00000052
# temporary stream =	468 fld_05_00000051
# plastic pollution =	1919 fld_05_00000286 (nr. of pieces)
expl_plt = ggplot(data=expl_spotData,aes(x=as.Date(created_at)))+
scale_x_date(date_labels = "%B %Y")
# make chart of timeseries
# water level	= 470 fld_05_00000066
# soil moisture = 469 fld_05_00000052
# temporary stream =	468 fld_05_00000051
# plastic pollution =	1919 fld_05_00000286 (nr. of pieces)
expl_plt = ggplot(data=expl_spotData,aes(x=as.Date(created_at)))+
scale_x_date(date_labels = "%B %Y")
expl_plt
if(expl_spotData$category[1]==470){
expl_plt = expl_plt +
geom_point(color = "#00AFBB",aes(y=expl_spotData$Streamlevel))+
geom_line(color = "#00AFBB", alpha = 0.5,aes(y=expl_spotData$Streamlevel))+
xlab('')+ylab('Water level class')
}else if (expl_spotData$category[1]==469){
ylabs = seq(min(expl_spotData$SMnr),max(expl_spotData$SMnr),by=1)
expl_plt = expl_plt + geom_point(color = "#FC4E07",aes(y=expl_spotData$SMnr))+
geom_line(color = "#FC4E07", alpha = 0.5,aes(y=expl_spotData$SMnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) SM_LUT$SMInput[SM_LUT$SMnr==x])))+
geom_rect(ymin=7.5,ymax=8.5,xmin=min(as.Date(expl_spotData$created_at)),xmax=max(as.Date(expl_spotData$created_at)),fill = "grey50",alpha=0.01)+
xlab('')+ylab('Soil Moisture Category')
}else if (expl_spotData$category[1]==468){
ylabs = seq(min(expl_spotData$TSnr),max(expl_spotData$TSnr),by=1)
expl_plt = expl_plt + geom_point(color = "#0ADF91",aes(y=expl_spotData$TSnr))+
geom_line(color = "#0ADF91", alpha = 0.5,aes(y=expl_spotData$TSnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) TS_LUT$TSInput[TS_LUT$TSnr==x])))+
xlab('')+ylab('Temporary Stream Status')
}else if (expl_spotData$category[1]==1919){
ylabs = seq(min(expl_spotData$PPnr),max(expl_spotData$PPnr),by=1)
expl_plt = expl_plt + geom_point(color = "#901AC3",aes(y=expl_spotData$PPnr))+
geom_line(color = "#901AC3", alpha = 0.5,aes(y=expl_spotData$PPnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) PP_LUT$PPInput[PP_LUT$PPnr==x])))+
xlab('')+ylab('Plastic Pollution amount')
}
nrow(expl_spotData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste0("Image of this Spot [",output$expl_date_thisImg,"]")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
158636
locFile4Attempt = 'CW_Data.csv'
observeEvent(input$reloadAllCWdata,{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
js$refresh()
})
if(file.exists(paste0("CWdata/",locFile4Attempt))){
CWdataFull = read.csv(paste0("CWdata/",locFile4Attempt))
latestUpdate = CWdataFull$created_at[nrow(CWdataFull)]
newCWdata = Download_LatestCWdata_from_API(lastDate = latestUpdate)
if(!is.null(newCWdata)){
colnames(newCWdata)[1]='Spot_ID'
CWdataFull = rbind(CWdataFull,newCWdata)
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
}else{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
CWdata = CWdataFull # select all CW data
# Base data manipulations for dashboard ----
CWdata$created_at = as.POSIXlt(CWdata$created_at,format = '%Y-%m-%d %H:%M:%S',tz='GMT',usetz=T)
uq.dates = unique(CWdata$created_at)
uq.roots = unique(CWdata$root_id)
uq.users = unique(CWdata$spotted_by)
# the start date is approximately when the app was officially launched, there are some pics from earlier dates that were added manually by us
dateSeries = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.dates)+3600,by='1 day')
attr(dateSeries,"tzone") = 'GMT'
# cumsums at dates and Root IDs with corresponding updates
cumSums = sapply(dateSeries,function(x) length(CWdata$Spot_ID[CWdata$created_at<=x]))
cumSumUsers = sapply(dateSeries,function(x) length(unique(CWdata$spotted_by[CWdata$created_at<=x])))
IdsPerRoot = sapply(uq.roots,function(x) CWdata$Spot_ID[CWdata$root_id==x])
IdsPerUser = sapply(uq.users,function(x) CWdata$Spot_ID[CWdata$spotted_by==x])
# for the slider further below
maxcontribs = max(sapply(IdsPerRoot, function(x) length(x)))
maxcontribUser = max(sapply(IdsPerUser, function(x) length(x)))
# for intermittent streams
CWdataTS = CWdata[CWdata$category==468,]
IdsPerRootTS = sapply(uq.roots,function(x) CWdataTS$Spot_ID[CWdataTS$root_id==x])
IdsPerUserTS = sapply(uq.users,function(x) CWdataTS$Spot_ID[CWdataTS$spotted_by==x])
maxcontribsTS = max(sapply(IdsPerRootTS, function(x) length(x)))
maxcontribUserTS = max(sapply(IdsPerUserTS, function(x) length(x)))
uq.datesTS = unique(CWdataTS$created_at)
dateSeriesTS = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesTS)+3600,by='1 day')
cumSumsTS = sapply(dateSeriesTS,function(x) length(CWdataTS$Spot_ID[CWdataTS$created_at<=x]))
cumSumsUsersTS = sapply(dateSeriesTS,function(x) length(unique(CWdataTS$spotted_by[CWdataTS$created_at<=x])))
expl_rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) 158636 %in% x))]
# extract spot data
expl_spotData = CWdata[CWdata$root_id==expl_rootId,]
# download image of entered ID
output$expl_thisImg <-
renderText({
shiny::validate(need(nrow(expl_spotData) > 0,message = "Enter an ID of an existing CrowdWater station (last digit in the link of a spot)."))
c('<img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==input$stationID],'.jpg alt="latest spot image" width="100%;"'),
'/>'
)
})
expl_plt = ggplot(data=expl_spotData,aes(x=as.Date(created_at)))+
scale_x_date(date_labels = "%m.%Y")
expl_plt
if(expl_spotData$category[1]==470){
expl_plt = expl_plt +
geom_line(color = "#00AFBB", alpha = 0.5,aes(y=expl_spotData$Streamlevel),size=1.5)+
geom_point(color = "#00AFBB",aes(y=expl_spotData$Streamlevel),size=2.5)+
xlab('')+ylab('Water level class')
}else if (expl_spotData$category[1]==469){
ylabs = seq(min(expl_spotData$SMnr),max(expl_spotData$SMnr),by=1)
expl_plt = expl_plt + geom_point(color = "#FC4E07",aes(y=expl_spotData$SMnr))+
geom_line(color = "#FC4E07", alpha = 0.5,aes(y=expl_spotData$SMnr),size=1.5)+
geom_point(color = "#FC4E07",aes(y=expl_spotData$SMnr),size=2.5)+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) SM_LUT$SMInput[SM_LUT$SMnr==x])))+
geom_rect(ymin=7.5,ymax=8.5,xmin=min(as.Date(expl_spotData$created_at)),xmax=max(as.Date(expl_spotData$created_at)),fill = "grey50",alpha=0.01)+
xlab('')+ylab('Soil Moisture Category')
}else if (expl_spotData$category[1]==468){
ylabs = seq(min(expl_spotData$TSnr),max(expl_spotData$TSnr),by=1)
expl_plt = expl_plt + geom_point(color = "#0ADF91",aes(y=expl_spotData$TSnr))+
geom_line(color = "#0ADF91", alpha = 0.5,aes(y=expl_spotData$TSnr),size=1.5)+
geom_point(color = "0ADF91",aes(y=expl_spotData$TSnr),size=2.5)+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) TS_LUT$TSInput[TS_LUT$TSnr==x])))+
xlab('')+ylab('Temporary Stream Status')
}else if (expl_spotData$category[1]==1919){
ylabs = seq(min(expl_spotData$PPnr),max(expl_spotData$PPnr),by=1)
expl_plt = expl_plt + geom_point(color = "#901AC3",aes(y=expl_spotData$PPnr))+
geom_line(color = "#901AC3", alpha = 0.5,aes(y=expl_spotData$PPnr),size=1.5)+
geom_point(color = "#901AC3",aes(y=expl_spotData$TSnr),size=2.5)+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) PP_LUT$PPInput[PP_LUT$PPnr==x])))+
xlab('')+ylab('Plastic Pollution amount')
}
expl_plt = expl_plt +theme_minimal()+ theme(
text = element_text(size=20),
rect=element_blank(),
panel.grid = element_blank(),
panel.background= element_blank(),
plot.background = element_blank())
expl_plt
ylabs
ylabs = seq(min(expl_spotData$SMnr),max(expl_spotData$SMnr),by=1)
ylabs =  seq(min(expl_spotData$Streamlevel),max(expl_spotData$Streamlevel),by=1)
min(expl_spotData$Streamlevel)
ylabs =  seq(min(expl_spotData$Streamlevel,na.rm = T),max(expl_spotData$Streamlevel,na.rm = T),by=1)
expl_spotData
# extract spot data
expl_spotData = CWdata[CWdata$root_id==expl_rootId,]
expl_spotData
expl_spotData$Streamlevel
WL_LUT
expl_plt = ggplot(data=expl_spotData,aes(x=as.Date(created_at)))+
scale_x_date(date_labels = "%m.%Y")
expl_plt = expl_plt +
geom_line(color = "#00AFBB", alpha = 0.5,aes(y=expl_spotData$Streamlevel),size=1.5)+
geom_point(color = "#00AFBB",aes(y=expl_spotData$Streamlevel),size=2.5)+
scale_y_continuous(breaks=ylabs,labels=ylabs)+
xlab('')+ylab('Water level class')
expl_plt
