expl_plt = expl_plt +
geom_point(color = "#00AFBB",aes(y=expl_spotData$Streamlevel))+
geom_line(color = "#00AFBB", alpha = 0.5,aes(y=expl_spotData$Streamlevel))+
xlab('')+ylab('Water level class')
}else if (expl_spotData$category[1]==469){
ylabs = seq(min(expl_spotData$SMnr),max(expl_spotData$SMnr),by=1)
expl_plt = expl_plt + geom_point(color = "#FC4E07",aes(y=expl_spotData$SMnr))+
geom_line(color = "#FC4E07", alpha = 0.5,aes(y=expl_spotData$SMnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) SM_LUT$SMInput[SM_LUT$SMnr==x])))+
geom_rect(ymin=7.5,ymax=8.5,xmin=min(as.Date(expl_spotData$created_at)),xmax=max(as.Date(expl_spotData$created_at)),fill = "grey50",alpha=0.01)+
xlab('')+ylab('Soil Moisture Category')
}else if (expl_spotData$category[1]==468){
ylabs = seq(min(expl_spotData$TSnr),max(expl_spotData$TSnr),by=1)
expl_plt = expl_plt + geom_point(color = "#0ADF91",aes(y=expl_spotData$TSnr))+
geom_line(color = "#0ADF91", alpha = 0.5,aes(y=expl_spotData$TSnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) TS_LUT$TSInput[TS_LUT$TSnr==x])))+
xlab('')+ylab('Temporary Stream Status')
}else if (expl_spotData$category[1]==1919){
ylabs = seq(min(expl_spotData$PPnr),max(expl_spotData$PPnr),by=1)
expl_plt = expl_plt + geom_point(color = "#901AC3",aes(y=expl_spotData$PPnr))+
geom_line(color = "#901AC3", alpha = 0.5,aes(y=expl_spotData$PPnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) PP_LUT$PPInput[PP_LUT$PPnr==x])))+
xlab('')+ylab('Plastic Pollution amount')+
}
# make chart of timeseries
# water level	= 470 fld_05_00000066
# soil moisture = 469 fld_05_00000052
# temporary stream =	468 fld_05_00000051
# plastic pollution =	1919 fld_05_00000286 (nr. of pieces)
expl_plt = ggplot(data=expl_spotData,aes(x=as.Date(created_at)))+
scale_x_date(date_labels = "%B %Y")
if(expl_spotData$category[1]==470){
expl_plt = expl_plt +
geom_point(color = "#00AFBB",aes(y=expl_spotData$Streamlevel))+
geom_line(color = "#00AFBB", alpha = 0.5,aes(y=expl_spotData$Streamlevel))+
xlab('')+ylab('Water level class')
}else if (expl_spotData$category[1]==469){
ylabs = seq(min(expl_spotData$SMnr),max(expl_spotData$SMnr),by=1)
expl_plt = expl_plt + geom_point(color = "#FC4E07",aes(y=expl_spotData$SMnr))+
geom_line(color = "#FC4E07", alpha = 0.5,aes(y=expl_spotData$SMnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) SM_LUT$SMInput[SM_LUT$SMnr==x])))+
geom_rect(ymin=7.5,ymax=8.5,xmin=min(as.Date(expl_spotData$created_at)),xmax=max(as.Date(expl_spotData$created_at)),fill = "grey50",alpha=0.01)+
xlab('')+ylab('Soil Moisture Category')
}else if (expl_spotData$category[1]==468){
ylabs = seq(min(expl_spotData$TSnr),max(expl_spotData$TSnr),by=1)
expl_plt = expl_plt + geom_point(color = "#0ADF91",aes(y=expl_spotData$TSnr))+
geom_line(color = "#0ADF91", alpha = 0.5,aes(y=expl_spotData$TSnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) TS_LUT$TSInput[TS_LUT$TSnr==x])))+
xlab('')+ylab('Temporary Stream Status')
}else if (expl_spotData$category[1]==1919){
ylabs = seq(min(expl_spotData$PPnr),max(expl_spotData$PPnr),by=1)
expl_plt = expl_plt + geom_point(color = "#901AC3",aes(y=expl_spotData$PPnr))+
geom_line(color = "#901AC3", alpha = 0.5,aes(y=expl_spotData$PPnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) PP_LUT$PPInput[PP_LUT$PPnr==x])))+
xlab('')+ylab('Plastic Pollution amount')
}
expl_plt
runApp()
runApp()
runApp()
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
dropdownButton(
inputId = "mydropdown",
label = "Controls",
icon = icon("sliders"),
status = "primary",
circle = FALSE,
sliderInput(
inputId = "n",
label = "Number of observations",
min = 10, max = 100, value = 30
),
prettyToggle(
inputId = "na",
label_on = "NAs keeped",
label_off = "NAs removed",
icon_on = icon("check"),
icon_off = icon("remove")
)
),
tags$div(style = "height: 140px;"), # spacing
verbatimTextOutput(outputId = "out"),
verbatimTextOutput(outputId = "state")
)
server <- function(input, output, session) {
output$out <- renderPrint({
cat(
" # n\n", input$n, "\n",
"# na\n", input$na
)
})
output$state <- renderPrint({
cat("Open:", input$mydropdown_state)
})
}
shinyApp(ui, server)
}
install.packages("shinyWidgets")
library(shinyWidgets)
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
dropdownButton(
inputId = "mydropdown",
label = "Controls",
icon = icon("sliders"),
status = "primary",
circle = FALSE,
sliderInput(
inputId = "n",
label = "Number of observations",
min = 10, max = 100, value = 30
),
prettyToggle(
inputId = "na",
label_on = "NAs keeped",
label_off = "NAs removed",
icon_on = icon("check"),
icon_off = icon("remove")
)
),
tags$div(style = "height: 140px;"), # spacing
verbatimTextOutput(outputId = "out"),
verbatimTextOutput(outputId = "state")
)
server <- function(input, output, session) {
output$out <- renderPrint({
cat(
" # n\n", input$n, "\n",
"# na\n", input$na
)
})
output$state <- renderPrint({
cat("Open:", input$mydropdown_state)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
}
expl_rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) input$stationID %in% x))]
uq.roots[unlist(lapply(IdsPerRoot,function(x) 1 %in% x))]
uq.roots[unlist(lapply(IdsPerRoot,function(x) "1" %in% x))]
uq.roots[unlist(lapply(IdsPerRoot,function(x) "test" %in% x))]
ui <- fluidPage(
selectInput("dataset", "Dataset", c("diamonds", "rock", "pressure", "cars")),
conditionalPanel( condition = "output.nrows",
checkboxInput("headonly", "Only use first 1000 rows"))
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$nrows <- reactive({
nrow(datasetInput())
})
outputOptions(output, "nrows", suspendWhenHidden = FALSE)
}
shinyApp(ui, server)
library(shiny)
library(shinythemes)
u <- shinyUI(fluidPage(
theme = shinytheme("slate"),
# Application title
titlePanel("Codon lookup"),
#
sidebarLayout(
sidebarPanel(
actionButton(inputId = "go", label = "Search"),
uiOutput("codonselection")
),
#
mainPanel(
verbatimTextOutput("aminoacid")
)
)
))
library(Biostrings)
s <- shinyServer(function(input, output) {
data <- eventReactive(input$go, {
input$codon
})
output$codonselection <- renderUI({
choices <- names(GENETIC_CODE)
default <- "TTC"
selectInput("codon",label="Select Codon",choices=choices,selected=default)
})
output$aminoacid <- renderText({
lookupcodon <-as.character(data())
if (lookupcodon %in% names(GENETIC_CODE)){
return(GENETIC_CODE[[ lookupcodon  ]])
} else {
return("Name not in GENETIC_CODE")
}
})
})
shinyApp(u,s)
library(shiny)
library(shinythemes)
u <- shinyUI(fluidPage(
theme = shinytheme("slate"),
# Application title
titlePanel("Codon lookup"),
#
sidebarLayout(
sidebarPanel(
actionButton(inputId = "go", label = "Search"),
uiOutput("codonselection")
),
#
mainPanel(
verbatimTextOutput("aminoacid")
)
)
))
library(Biostrings)
s <- shinyServer(function(input, output) {
data <- eventReactive(input$go, {
input$codon
})
output$codonselection <- renderUI({
choices <- names(GENETIC_CODE)
default <- "TTC"
selectInput("codon",label="Select Codon",choices=choices,selected=default)
})
output$aminoacid <- renderText({
lookupcodon <-as.character(data())
if (lookupcodon %in% names(GENETIC_CODE)){
return(GENETIC_CODE[[ lookupcodon  ]])
} else {
return("Name not in GENETIC_CODE")
}
})
})
shinyApp(u,s)
library(shiny)
library(shinythemes)
u <- shinyUI(fluidPage(
theme = shinytheme("slate"),
# Application title
titlePanel("Codon lookup"),
#
sidebarLayout(
sidebarPanel(
actionButton(inputId = "go", label = "Search"),
uiOutput("codonselection")
),
#
mainPanel(
verbatimTextOutput("aminoacid")
)
)
))
library(Biostrings)
s <- shinyServer(function(input, output) {
data <- eventReactive(input$go, {
input$codon
})
output$codonselection <- renderUI({
choices <- names(GENETIC_CODE)
default <- "TTC"
selectInput("codon",label="Select Codon",choices=choices,selected=default)
})
output$aminoacid <- renderText({
lookupcodon <-as.character(data())
if (lookupcodon %in% names(GENETIC_CODE)){
return(GENETIC_CODE[[ lookupcodon  ]])
} else {
return("Name not in GENETIC_CODE")
}
})
})
shinyApp(u,s)
library(shiny)
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
data <- reactive({ get(input$data, 'package:datasets') })
output$plot <- renderPlot({
hist(data()[, 1], col = 'forestgreen', border = 'white')
})
output$table <- renderTable({
head(data())
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
data <- reactive({
validate(
need(input$data != "", label = "data set")
)
get(input$data, 'package:datasets')
})
output$plot <- renderPlot({
hist(data()[, 1], col = 'forestgreen', border = 'white')
})
output$table <- renderTable({
head(data())
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
library(shiny)
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
data <- reactive({
validate(
need(input$data != "", label = "data set")
)
get(input$data, 'package:datasets')
})
output$plot <- renderPlot({
hist(data()[, 1], col = 'forestgreen', border = 'white')
})
output$table <- renderTable({
head(data())
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Validation App"),
sidebarLayout(
sidebarPanel(
selectInput("data", label = "Data set",
choices = c("", "mtcars", "faithful", "iris"))
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
data <- reactive({
validate(
need(input$data != "", label = "data set")
)
get(input$data, 'test')
})
output$plot <- renderPlot({
hist(data()[, 1], col = 'forestgreen', border = 'white')
})
output$table <- renderTable({
head(data())
})
}
shinyApp(ui, server)
# Explore contributions of stations with input id ----
UsrInputID = reactive({
validate(
need(length(uq.roots[unlist(lapply(IdsPerRoot,function(x) input$stationID %in% x)))==1, label = "Input Id")
)
get(input$stationID)
})
observeEvent(input$stationID,{
expl_rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) input$stationID %in% x))]
if(length(expl_rootId)==0){
}
# extract spot data
expl_spotData = CWdata[CWdata$root_id==expl_rootId,]
# define type of observation (WL, SM, PP , TS)
expl_osType = unique(expl_spotData$topic_id)[1] # to avoid errors if there are multiple categories in the vector (which should not be possible)
# create the text output
output$expl_statRootID <- renderText({paste0("The root spot id is: ",expl_rootId) })
# download root image and latest update
output$expl_thisImg <-
renderText({
c('<div class="container"><img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==input$stationID],'.jpg alt="latest spot image" width="50%;"'),
'/><div class="bottom-right">',format(expl_spotData$created_at[expl_spotData$Spot_ID==input$stationID], "%d.%m.%Y %H:%M:%S"),'</div>'
)
})
output$expl_rootImg <-
renderText({
c('<div class="container"><img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==expl_rootId],'.jpg alt="root image" width="50%;"'),
'/><div class="bottom-right">',format(expl_spotData$created_at[expl_spotData$Spot_ID==expl_rootId], "%d.%m.%Y %H:%M:%S"),'</div>'
)
})
output$expl_latestImg <-
renderText({
c('<div class="container"><img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[length(expl_spotData$image)],'.jpg alt="latest spot image" width="50%;"'),
'/><div class="bottom-right">',format(expl_spotData$created_at[length(expl_spotData$image)], "%d.%m.%Y %H:%M:%S"),'</div>'
)
})
# make chart of timeseries
# water level	= 470 fld_05_00000066
# soil moisture = 469 fld_05_00000052
# temporary stream =	468 fld_05_00000051
# plastic pollution =	1919 fld_05_00000286 (nr. of pieces)
expl_plt = ggplot(data=expl_spotData,aes(x=as.Date(created_at)))+
scale_x_date(date_labels = "%B %Y")
if(expl_spotData$category[1]==470){
expl_plt = expl_plt +
geom_point(color = "#00AFBB",aes(y=expl_spotData$Streamlevel))+
geom_line(color = "#00AFBB", alpha = 0.5,aes(y=expl_spotData$Streamlevel))+
xlab('')+ylab('Water level class')
}else if (expl_spotData$category[1]==469){
ylabs = seq(min(expl_spotData$SMnr),max(expl_spotData$SMnr),by=1)
expl_plt = expl_plt + geom_point(color = "#FC4E07",aes(y=expl_spotData$SMnr))+
geom_line(color = "#FC4E07", alpha = 0.5,aes(y=expl_spotData$SMnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) SM_LUT$SMInput[SM_LUT$SMnr==x])))+
geom_rect(ymin=7.5,ymax=8.5,xmin=min(as.Date(expl_spotData$created_at)),xmax=max(as.Date(expl_spotData$created_at)),fill = "grey50",alpha=0.01)+
xlab('')+ylab('Soil Moisture Category')
}else if (expl_spotData$category[1]==468){
ylabs = seq(min(expl_spotData$TSnr),max(expl_spotData$TSnr),by=1)
expl_plt = expl_plt + geom_point(color = "#0ADF91",aes(y=expl_spotData$TSnr))+
geom_line(color = "#0ADF91", alpha = 0.5,aes(y=expl_spotData$TSnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) TS_LUT$TSInput[TS_LUT$TSnr==x])))+
xlab('')+ylab('Temporary Stream Status')
}else if (expl_spotData$category[1]==1919){
ylabs = seq(min(expl_spotData$PPnr),max(expl_spotData$PPnr),by=1)
expl_plt = expl_plt + geom_point(color = "#901AC3",aes(y=expl_spotData$PPnr))+
geom_line(color = "#901AC3", alpha = 0.5,aes(y=expl_spotData$PPnr))+
scale_y_continuous(breaks=ylabs,labels=as.character(sapply(ylabs,function(x) PP_LUT$PPInput[PP_LUT$PPnr==x])))+
xlab('')+ylab('Plastic Pollution amount')
}
expl_plt = expl_plt +theme_minimal()+ theme(
rect=element_blank(),
panel.grid = element_blank(),
panel.background= element_blank(),
plot.background = element_blank())
output$expl_timelinePlot <- renderPlot({expl_plt}, bg="transparent", execOnResize = TRUE)
rm(expl_plt)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# download root image and latest update
output$expl_thisImg <-
renderText({
c('<div class="container"><img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==input$stationID],'.jpg alt="latest spot image" width="50%;"'),
'/><div class="bottom-right">',format(expl_spotData$created_at[expl_spotData$Spot_ID==input$stationID], "%d.%m.%Y %H:%M:%S"),'</div>'
)
})
