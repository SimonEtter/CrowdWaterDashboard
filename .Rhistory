# add data to grand table
t.uq.classes = unique(t.WLClassApp_WithWLData$WATER_LEVEL)
stationsWithData$NrPoints_App[i] = length(t.WLClassApp_WithWLData$WATER_LEVEL)
stationsWithData$NrDiffPpl_App[i] = length(unique(t.WLClassApp_WithWLData$USER_ID))
stationsWithData$NrClassesCvrd_App[i] = length(t.uq.classes)
stationsWithData$SpearmanRho_App[i] = SpearmanTest$estimate
stationsWithData$SpearmanP_App[i] = SpearmanTest$p.value
# create the boxplot
wlclass_plot(outFile = paste0(PlotFolder,'/Boxplot_WL_',stationsWithData$Stream[i],'_',stationsWithData$Location[i],'_CWApp.png'),
dataVar = t.WLClassApp_WithWLData, xcolumn="WLClasses_floor", ycolumn = "MeasuredWL",
xAxlabel = "WL-Class", yAxlabel=paste0('Measured Waterlevel [',stationsWithData$WL_unit[i],']'),
titleStr = paste0(stationsWithData$Stream[i],' - ',stationsWithData$Location[i],' [CrowdWater App]'),
spearmanRho = SpearmanTest$estimate, spearmanP = SpearmanTest$p.value,nContributors = stationsWithData$NrDiffPpl_App[i])
# check if people improved ----
# if there are 10 or more contributions by the same person
userContribNr = table(t.WLClassApp_WithWLData$USER_ID)
usersWithMoreThanEq10Contribs = names(userContribNr)[userContribNr>=15]
if(length(usersWithMoreThanEq10Contribs)==0){
}else{
for(tra in 1: seq_along(usersWithMoreThanEq10Contribs)){
t.usrContribs = t.WLClassApp_WithWLData[t.WLClassApp_WithWLData$USER_ID==usersWithMoreThanEq10Contribs[tra],]
t.usrContribs$fstOr2ndhalf = NA
spearTests1stHalf = vector()
spearTests2ndHalf = vector()
#iterate along the entire set of contributions and always add one more contribution and perform the spearman
# rank test on both parts of the set
splitters = 2:(nrow(t.usrContribs)-2)
for(ii in splitters){ # from 2 and until nrow()-2 to avoid having only one value
t.usrContribs$fstOr2ndhalf[1:ii] = 'Second half'
t.usrContribs$fstOr2ndhalf[(ii+1):nrow(t.usrContribs)] = 'First half'
SpearmanTest_1sthalf = wl_spearmanRankCorTest(data = t.usrContribs[t.usrContribs$fstOr2ndhalf=='First half',], x="WATER_LEVEL", y = "MeasuredWL")
SpearmanTest_2ndhalf = wl_spearmanRankCorTest(data = t.usrContribs[t.usrContribs$fstOr2ndhalf=='Second half',], x="WATER_LEVEL", y = "MeasuredWL")
spearTests1stHalf[ii] = SpearmanTest_1sthalf$estimate
spearTests2ndHalf[ii] = SpearmanTest_2ndhalf$estimate
}
# reverse the series to make it more intuitive
spearTests1stHalf = rev(spearTests1stHalf)
spearTests2ndHalf = rev(spearTests2ndHalf)
# bp = breakpoints(spearTests1stHalf~1)
# smoothing the data ----
windowSize = 5
smooth1stHalf = rollapply(spearTests1stHalf, width = windowSize, FUN = mean, align = "left")
smooth2ndHalf = rollapply(spearTests2ndHalf, width = windowSize, FUN = mean, align = "left")
# Check where the difference is biggest within the 10-90 percent of the data
smooth1stHalf_10t090 = smooth1stHalf[((length(smooth1stHalf)/10)*2):((length(smooth1stHalf)/10)*8)]
smooth2ndHalf_10t090 = smooth2ndHalf[((length(smooth2ndHalf)/10)*2):((length(smooth2ndHalf)/10)*8)]
absDifsOfSmooths = abs(smooth1stHalf-smooth2ndHalf)
which(max(absDifsOfSmooths,na.rm=T) == absDifsOfSmooths)
# code below only useful for testing with multiple splits for the dataset (default is 2 for splitting the data in half)
png(paste0('G:/h2k-data/Projects/CrowdWater/WP7 - CW Field and App Data Accuracy/Data/DataVisualisations/',stationsWithData$Stream[i],' - ',stationsWithData$Location[i],' User',tra,'.png'),width = 1024,height = 720)
plot(y=spearTests1stHalf,x=seq_along(spearTests1stHalf),col='orange',type='l',ylim=c(min(c(spearTests1stHalf,spearTests2ndHalf),na.rm = T),max(c(spearTests1stHalf,spearTests2ndHalf),na.rm = T)),main= paste0(stationsWithData$Stream[i],' - ',stationsWithData$Location[i],' [CrowdWater App]'),ylab= 'spearmans rho',xlab='Number of contribution [low numbers: almost no values are in the first part]')
lines(y=spearTests2ndHalf,x=seq_along(spearTests2ndHalf),col='lightblue')
lines(y=smooth1stHalf_10t090,x=seq_along(smooth1stHalf_10t090),col='red')
lines(y=smooth2ndHalf_10t090,x=seq_along(smooth2ndHalf_10t090),col='blue')
# abline(v=bp$breakpoints,col='darkgrey')
# text(labels=paste0('First BreakPoint - ', max(bp$breakpoints)),x =max(bp$breakpoints) ,y=mean(smooth1stHalf,na.rm = T))
legend(x='bottom',legend=c('1st half','1st half smooth','2nd half','2nd half smooth','Breakp. 1st H.'),fill = c('red','orange','blue','lightblue','darkgrey'))
dev.off()
t.usrContribs$WL4Plot = NA
t.usrContribs$WL4Plot[t.usrContribs$fstOr2ndhalf=='Second half'] = t.usrContribs$WLClasses_floor[t.usrContribs$fstOr2ndhalf=='Second half'] + 0.15
t.usrContribs$WL4Plot[t.usrContribs$fstOr2ndhalf=='First half'] = t.usrContribs$WLClasses_floor[t.usrContribs$fstOr2ndhalf=='First half'] - 0.15
# create the boxplot
png(paste0('G:/h2k-data/Projects/CrowdWater/WP7 - CW Field and App Data Accuracy/Data/DataVisualisations/Boxplot_WL_',stationsWithData$Stream[i],'_',stationsWithData$Location[i],'_CWApp.png'),width = 1024,height = 720)
print(
ggplot(data=t.usrContribs,aes(x=WL4Plot,y=MeasuredWL,fill=fstOr2ndhalf,group=WL4Plot))+
geom_boxplot())+
ggtitle(paste0(usersWithMoreThanEq10Contribs[tra],' - ',stationsWithData$Stream[i],' - ',stationsWithData$Location[i],' [CrowdWater App]'))
dev.off()
}
}
# split their contribution in half and do two additional boxplots for that person
rm(t.uq.classes,SpearmanTest,maxContribPerHour)
}
plot(y=spearTests1stHalf,x=seq_along(spearTests1stHalf),col='orange',type='l',ylim=c(min(c(spearTests1stHalf,spearTests2ndHalf),na.rm = T),max(c(spearTests1stHalf,spearTests2ndHalf),na.rm = T)),main= paste0(stationsWithData$Stream[i],' - ',stationsWithData$Location[i],' [CrowdWater App]'),ylab= 'spearmans rho',xlab='Number of contribution [low numbers: almost no values are in the first part]')
lines(y=spearTests2ndHalf,x=seq_along(spearTests2ndHalf),col='lightblue')
lines(y=smooth1stHalf_10t090,x=seq_along(smooth1stHalf_10t090),col='red')
lines(y=smooth2ndHalf_10t090,x=seq_along(smooth2ndHalf_10t090),col='blue')
absDifsOfSmooths = abs(smooth1stHalf-smooth2ndHalf)
which(max(absDifsOfSmooths,na.rm=T) == absDifsOfSmooths)
absDifsOfSmooths
absDifsOfSmooths = abs(smooth1stHalf_10t090-smooth2ndHalf_10t090)
which(max(absDifsOfSmooths,na.rm=T) == absDifsOfSmooths)
SplitSmootIdx = which(max(absDifsOfSmooths,na.rm=T) == absDifsOfSmooths)
SplitSmoothIdx = which(max(absDifsOfSmooths,na.rm=T) == absDifsOfSmooths)
SplitSmoothIdx
t.usrContribs
SpearmanTest_1sthalf
splitters
shiny::runApp()
dateSeries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(shinycssloaders)
library(shinyjs)
library(rdrop2)
library(V8)
# setwd('G:/h2k-data/Projects/CrowdWater/App & Homepage/Homepage/DataDashboard/CrowdWaterDashboard/')
source('./CW_API_Download.R')
# icons: http://rstudio.github.io/shinydashboard/appearance.html
# the javascript code to refresh the entire page.
jscode <- "shinyjs.refresh = function() { history.go(0); }"
locFile4Attempt = 'CW_Data.csv'
observeEvent(input$reloadAllCWdata,{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
js$refresh()
})
if(file.exists(paste0("CWdata/",locFile4Attempt))){
CWdataFull = read.csv(paste0("CWdata/",locFile4Attempt))
latestUpdate = CWdataFull$created_at[nrow(CWdataFull)]
newCWdata = Download_LatestCWdata_from_API(lastDate = latestUpdate)
if(!is.null(newCWdata)){
colnames(newCWdata)[1]='Spot_ID'
CWdataFull = rbind(CWdataFull,newCWdata)
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
}else{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
CWdata = CWdataFull # select all CW data
# Base data manipulations for dashboard ----
CWdata$created_at = as.POSIXlt(CWdata$created_at,format = '%Y-%m-%d %H:%M:%S',tz='GMT',usetz=T)
uq.dates = unique(CWdata$created_at)
uq.roots = unique(CWdata$root_id)
uq.users = unique(CWdata$spotted_by)
# the start date is approximately when the app was officially launched, there are some pics from earlier dates that were added manually by us
dateSeries = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.dates)+3600*24,by='1 day')
attr(dateSeries,"tzone") = 'GMT'
# cumsums at dates and Root IDs with corresponding updates
cumSums = sapply(dateSeries,function(x) length(CWdata$Spot_ID[CWdata$created_at<=x]))
cumSumUsers = sapply(dateSeries,function(x) length(unique(CWdata$spotted_by[CWdata$created_at<=x])))
IdsPerRoot = sapply(uq.roots,function(x) CWdata$Spot_ID[CWdata$root_id==x])
IdsPerUser = sapply(uq.users,function(x) CWdata$Spot_ID[CWdata$spotted_by==x])
# for the slider further below
maxcontribs = max(sapply(IdsPerRoot, function(x) length(x)))
maxcontribUser = max(sapply(IdsPerUser, function(x) length(x)))
# for intermittent streams
CWdataTS = CWdata[CWdata$category==468,]
IdsPerRootTS = sapply(uq.roots,function(x) CWdataTS$Spot_ID[CWdataTS$root_id==x])
IdsPerUserTS = sapply(uq.users,function(x) CWdataTS$Spot_ID[CWdataTS$spotted_by==x])
maxcontribsTS = max(sapply(IdsPerRootTS, function(x) length(x)))
maxcontribUserTS = max(sapply(IdsPerUserTS, function(x) length(x)))
uq.datesTS = unique(CWdataTS$created_at)
dateSeriesTS = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesTS)+3600*24,by='1 day')
cumSumsTS = sapply(dateSeriesTS,function(x) length(CWdataTS$Spot_ID[CWdataTS$created_at<=x]))
cumSumsUsersTS = sapply(dateSeriesTS,function(x) length(unique(CWdataTS$spotted_by[CWdataTS$created_at<=x])))
# for soil moisture
CWdataSM = CWdata[CWdata$category==469,]
IdsPerRootSM = sapply(uq.roots,function(x) CWdataSM$Spot_ID[CWdataSM$root_id==x])
IdsPerUserSM = sapply(uq.users,function(x) CWdataSM$Spot_ID[CWdataSM$spotted_by==x])
maxcontribsSM = max(sapply(IdsPerRootSM, function(x) length(x)))
maxcontribUserSM = max(sapply(IdsPerUserSM, function(x) length(x)))
uq.datesSM = unique(CWdataSM$created_at)
dateSeriesSM = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesSM)+3600*24,by='1 day')
cumSumsSM = sapply(dateSeriesSM,function(x) length(CWdataSM$Spot_ID[CWdataSM$created_at<=x]))
cumSumsUsersSM = sapply(dateSeriesSM,function(x) length(unique(CWdataSM$spotted_by[CWdataSM$created_at<=x])))
# for plastic pollution streams
CWdataPP = CWdata[CWdata$category==1919,]
IdsPerRootPP = sapply(uq.roots,function(x) CWdataPP$Spot_ID[CWdataPP$root_id==x])
IdsPerUserPP = sapply(uq.users,function(x) CWdataPP$Spot_ID[CWdataPP$spotted_by==x])
maxcontribsPP = max(sapply(IdsPerRootPP, function(x) length(x)))
maxcontribUserPP = max(sapply(IdsPerUserPP, function(x) length(x)))
uq.datesPP = unique(CWdataPP$created_at)
dateSeriesPP = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesPP)+3600*24,by='1 day')
cumSumsPP = sapply(dateSeriesPP,function(x) length(CWdataPP$Spot_ID[CWdataPP$created_at<=x]))
cumSumsUsersPP = sapply(dateSeriesPP,function(x) length(unique(CWdataPP$spotted_by[CWdataPP$created_at<=x])))
# for water levels
CWdataWL = CWdata[CWdata$category==470,]
IdsPerRootWL = sapply(uq.roots,function(x) CWdataWL$Spot_ID[CWdataWL$root_id==x])
IdsPerUserWL = sapply(uq.users,function(x) CWdataWL$Spot_ID[CWdataWL$spotted_by==x])
maxcontribsWL = max(sapply(IdsPerRootWL, function(x) length(x)))
maxcontribUserWL = max(sapply(IdsPerUserWL, function(x) length(x)))
uq.datesWL = unique(CWdataWL$created_at)
dateSeriesWL = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesWL)+3600*24,by='1 day')
cumSumsWL = sapply(dateSeriesWL,function(x) length(CWdataWL$Spot_ID[CWdataWL$created_at<=x]))
cumSumsUsersWL = sapply(dateSeriesWL,function(x) length(unique(CWdataWL$spotted_by[CWdataWL$created_at<=x])))
# Plots with contributions ----
cumPlot = cumplot(dateSeries, cumSums)
output$cumsumplot = renderPlot({cumPlot})
cumPlotWL = cumplot(dateSeriesWL, cumSumsWL)
output$cumsumplotWL = renderPlot({cumPlotWL})
cumPlotSM = cumplot(dateSeriesSM, cumSumsSM)
output$cumsumplotSM = renderPlot({cumPlotSM})
cumPlotTS = cumplot(dateSeriesTS, cumSumsTS)
output$cumsumplotTS = renderPlot({cumPlotTS})
cumPlotPP = cumplot(dateSeriesPP, cumSumsPP)
output$cumsumplotPP = renderPlot({cumPlotPP})
dateSeries
dateSeries[length(dateSeries)]
runApp()
runApp()
install.packages(c("rdrop2", "shinyjs", "V8"))
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(shinycssloaders)
library(shinyjs)
library(rdrop2)
library(V8)
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
# setwd('G:/h2k-data/Projects/CrowdWater/App & Homepage/Homepage/DataDashboard/CrowdWaterDashboard/')
setwd('G:/group/h2k-data/Projects/CrowdWater/App & Homepage/Homepage/DataDashboard/CrowdWaterDashboard')
# setwd('G:/h2k-data/Projects/CrowdWater/App & Homepage/Homepage/DataDashboard/CrowdWaterDashboard/')
# setwd('G:/group/h2k-data/Projects/CrowdWater/App & Homepage/Homepage/DataDashboard/CrowdWaterDashboard')
source('./CW_API_Download.R')
locFile4Attempt = 'CW_Data.csv'
observeEvent(input$reloadAllCWdata,{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
js$refresh()
})
if(file.exists(paste0("CWdata/",locFile4Attempt))){
CWdataFull = read.csv(paste0("CWdata/",locFile4Attempt))
latestUpdate = CWdataFull$created_at[nrow(CWdataFull)]
newCWdata = Download_LatestCWdata_from_API(lastDate = latestUpdate)
if(!is.null(newCWdata)){
colnames(newCWdata)[1]='Spot_ID'
CWdataFull = rbind(CWdataFull,newCWdata)
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
}else{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
CWdata = CWdataFull # select all CW data
# Base data manipulations for dashboard ----
CWdata$created_at = as.POSIXlt(CWdata$created_at,format = '%Y-%m-%d %H:%M:%S',tz='GMT',usetz=T)
uq.dates = unique(CWdata$created_at)
uq.roots = unique(CWdata$root_id)
uq.users = unique(CWdata$spotted_by)
# the start date is approximately when the app was officially launched, there are some pics from earlier dates that were added manually by us
dateSeries = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.dates)+3600,by='1 day')
attr(dateSeries,"tzone") = 'GMT'
# cumsums at dates and Root IDs with corresponding updates
cumSums = sapply(dateSeries,function(x) length(CWdata$Spot_ID[CWdata$created_at<=x]))
cumSumUsers = sapply(dateSeries,function(x) length(unique(CWdata$spotted_by[CWdata$created_at<=x])))
IdsPerRoot = sapply(uq.roots,function(x) CWdata$Spot_ID[CWdata$root_id==x])
IdsPerUser = sapply(uq.users,function(x) CWdata$Spot_ID[CWdata$spotted_by==x])
# for the slider further below
maxcontribs = max(sapply(IdsPerRoot, function(x) length(x)))
maxcontribUser = max(sapply(IdsPerUser, function(x) length(x)))
# for intermittent streams
CWdataTS = CWdata[CWdata$category==468,]
IdsPerRootTS = sapply(uq.roots,function(x) CWdataTS$Spot_ID[CWdataTS$root_id==x])
IdsPerUserTS = sapply(uq.users,function(x) CWdataTS$Spot_ID[CWdataTS$spotted_by==x])
maxcontribsTS = max(sapply(IdsPerRootTS, function(x) length(x)))
maxcontribUserTS = max(sapply(IdsPerUserTS, function(x) length(x)))
uq.datesTS = unique(CWdataTS$created_at)
dateSeriesTS = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesTS)+3600,by='1 day')
cumSumsTS = sapply(dateSeriesTS,function(x) length(CWdataTS$Spot_ID[CWdataTS$created_at<=x]))
cumSumsUsersTS = sapply(dateSeriesTS,function(x) length(unique(CWdataTS$spotted_by[CWdataTS$created_at<=x])))
# for soil moisture
CWdataSM = CWdata[CWdata$category==469,]
IdsPerRootSM = sapply(uq.roots,function(x) CWdataSM$Spot_ID[CWdataSM$root_id==x])
IdsPerUserSM = sapply(uq.users,function(x) CWdataSM$Spot_ID[CWdataSM$spotted_by==x])
maxcontribsSM = max(sapply(IdsPerRootSM, function(x) length(x)))
maxcontribUserSM = max(sapply(IdsPerUserSM, function(x) length(x)))
uq.datesSM = unique(CWdataSM$created_at)
dateSeriesSM = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesSM)+3600,by='1 day')
cumSumsSM = sapply(dateSeriesSM,function(x) length(CWdataSM$Spot_ID[CWdataSM$created_at<=x]))
cumSumsUsersSM = sapply(dateSeriesSM,function(x) length(unique(CWdataSM$spotted_by[CWdataSM$created_at<=x])))
# for plastic pollution streams
CWdataPP = CWdata[CWdata$category==1919,]
IdsPerRootPP = sapply(uq.roots,function(x) CWdataPP$Spot_ID[CWdataPP$root_id==x])
IdsPerUserPP = sapply(uq.users,function(x) CWdataPP$Spot_ID[CWdataPP$spotted_by==x])
maxcontribsPP = max(sapply(IdsPerRootPP, function(x) length(x)))
maxcontribUserPP = max(sapply(IdsPerUserPP, function(x) length(x)))
uq.datesPP = unique(CWdataPP$created_at)
dateSeriesPP = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesPP)+3600,by='1 day')
cumSumsPP = sapply(dateSeriesPP,function(x) length(CWdataPP$Spot_ID[CWdataPP$created_at<=x]))
cumSumsUsersPP = sapply(dateSeriesPP,function(x) length(unique(CWdataPP$spotted_by[CWdataPP$created_at<=x])))
# for water levels
CWdataWL = CWdata[CWdata$category==470,]
IdsPerRootWL = sapply(uq.roots,function(x) CWdataWL$Spot_ID[CWdataWL$root_id==x])
IdsPerUserWL = sapply(uq.users,function(x) CWdataWL$Spot_ID[CWdataWL$spotted_by==x])
maxcontribsWL = max(sapply(IdsPerRootWL, function(x) length(x)))
maxcontribUserWL = max(sapply(IdsPerUserWL, function(x) length(x)))
uq.datesWL = unique(CWdataWL$created_at)
dateSeriesWL = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesWL)+3600,by='1 day')
cumSumsWL = sapply(dateSeriesWL,function(x) length(CWdataWL$Spot_ID[CWdataWL$created_at<=x]))
cumSumsUsersWL = sapply(dateSeriesWL,function(x) length(unique(CWdataWL$spotted_by[CWdataWL$created_at<=x])))
# Plots with contributions ----
cumPlot = cumplot(dateSeries, cumSums)
cumPlot
library(ggplot2)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(shinycssloaders)
library(shinyjs)
library(rdrop2)
library(V8)
CWdata
IdsPerRoot
uq.roots
runApp()
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
x=107811
lapply(IdsPerRoot,function(x) input$stationID %in% x)
lapply(IdsPerRoot,function(x) 107811 %in% x)
which(unlist(lapply(IdsPerRoot,function(x) 107811 %in% x)))
rootId[(unlist(lapply(IdsPerRoot,function(x) 107811 %in% x)))]
uq.roots[(unlist(lapply(IdsPerRoot,function(x) 107811 %in% x)))]
(unlist(lapply(IdsPerRoot,function(x) 107811 %in% x)))
rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) input$stationID %in% x))]
runApp()
CWdata$image[CWdata$root_id==35970]
CWdata$image[CWdata$Spot_ID==35970]
expl_spotData = CWdata[CWdata$root_id==rootId,]
rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) input$stationID %in% x))]
rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) 75386 %in% x))]
rootId
uq.roots[unlist(lapply(IdsPerRoot,function(x) 35970 %in% x))]
expl_spotData = CWdata[CWdata$root_id==rootId,]
expl_spotData$topic_id
# define type of observation (WL, SM, PP , TS)
expl_osType = expl_spotData$topic_id
# define type of observation (WL, SM, PP , TS)
expl_osType = unique(expl_spotData$topic_id)
expl_osType
# define type of observation (WL, SM, PP , TS)
expl_osType = unique(expl_spotData$topic_id)[1]
expl_osType
# download root image and latest update
expl_rootimg = download.file(url = paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==expl_rootId],'.jpg'))
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==expl_rootId],'.jpg')
rootId
expl_rootId=rootId
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==expl_rootId],'.jpg')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==expl_rootId],'.jpg')
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==expl_rootId],'.jpg alt="root image" height="50%" width="50%"')
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
setwd('G:/h2k-data/Projects/CrowdWater/App & Homepage/Homepage/DataDashboard/CrowdWaterDashboard/')
# setwd('G:/h2k-data/Projects/CrowdWater/App & Homepage/Homepage/DataDashboard/CrowdWaterDashboard/')
# setwd('G:/group/h2k-data/Projects/CrowdWater/App & Homepage/Homepage/DataDashboard/CrowdWaterDashboard')
source('./CW_API_Download.R')
locFile4Attempt = 'CW_Data.csv'
observeEvent(input$reloadAllCWdata,{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
js$refresh()
})
if(file.exists(paste0("CWdata/",locFile4Attempt))){
CWdataFull = read.csv(paste0("CWdata/",locFile4Attempt))
latestUpdate = CWdataFull$created_at[nrow(CWdataFull)]
newCWdata = Download_LatestCWdata_from_API(lastDate = latestUpdate)
if(!is.null(newCWdata)){
colnames(newCWdata)[1]='Spot_ID'
CWdataFull = rbind(CWdataFull,newCWdata)
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
}else{
CWdataFull = Download_AllCWdata_from_API()
colnames(CWdataFull)[1]='Spot_ID'
write.csv(CWdataFull,file=paste0("CWdata/",locFile4Attempt),row.names = F)
}
CWdata = CWdataFull # select all CW data
# Base data manipulations for dashboard ----
CWdata$created_at = as.POSIXlt(CWdata$created_at,format = '%Y-%m-%d %H:%M:%S',tz='GMT',usetz=T)
uq.dates = unique(CWdata$created_at)
uq.roots = unique(CWdata$root_id)
uq.users = unique(CWdata$spotted_by)
# the start date is approximately when the app was officially launched, there are some pics from earlier dates that were added manually by us
dateSeries = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.dates)+3600,by='1 day')
attr(dateSeries,"tzone") = 'GMT'
# cumsums at dates and Root IDs with corresponding updates
cumSums = sapply(dateSeries,function(x) length(CWdata$Spot_ID[CWdata$created_at<=x]))
cumSumUsers = sapply(dateSeries,function(x) length(unique(CWdata$spotted_by[CWdata$created_at<=x])))
IdsPerRoot = sapply(uq.roots,function(x) CWdata$Spot_ID[CWdata$root_id==x])
IdsPerUser = sapply(uq.users,function(x) CWdata$Spot_ID[CWdata$spotted_by==x])
# for the slider further below
maxcontribs = max(sapply(IdsPerRoot, function(x) length(x)))
maxcontribUser = max(sapply(IdsPerUser, function(x) length(x)))
# for intermittent streams
CWdataTS = CWdata[CWdata$category==468,]
IdsPerRootTS = sapply(uq.roots,function(x) CWdataTS$Spot_ID[CWdataTS$root_id==x])
IdsPerUserTS = sapply(uq.users,function(x) CWdataTS$Spot_ID[CWdataTS$spotted_by==x])
maxcontribsTS = max(sapply(IdsPerRootTS, function(x) length(x)))
maxcontribUserTS = max(sapply(IdsPerUserTS, function(x) length(x)))
uq.datesTS = unique(CWdataTS$created_at)
dateSeriesTS = seq(from=min(as.POSIXct("2017-01-01 01:00:00 GMT")),to=max(uq.datesTS)+3600,by='1 day')
cumSumsTS = sapply(dateSeriesTS,function(x) length(CWdataTS$Spot_ID[CWdataTS$created_at<=x]))
expl_rootId = uq.roots[unlist(lapply(IdsPerRoot,function(x) input$stationID %in% x))]
# extract spot data
expl_spotData = CWdata[CWdata$root_id==expl_rootId,]
# define type of observation (WL, SM, PP , TS)
expl_osType = unique(expl_spotData$topic_id)[1] # to avoid errors if there are multiple categories in the vector (which should not be possible)
# create the text output
output$expl_statRootID <- renderText({paste0("The root spot id is: ",expl_rootId) })
# download root image and latest update
output$expl_rootImg <-
renderText({
c(
'<img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==expl_rootId],'.jpg alt="root image" height="25%" width="25%"'),
'/>'
)
})
expl_spotData
# extract spot data
expl_spotData = CWdata[CWdata$root_id==expl_rootId,]
expl_spotData = CWdata[CWdata$root_id==22594]
expl_spotData = CWdata[CWdata$root_id==22594,]
# define type of observation (WL, SM, PP , TS)
expl_osType = unique(expl_spotData$topic_id)[1] # to avoid errors if there are multiple categories in the vector (which should not be possible)
# create the text output
output$expl_statRootID <- renderText({paste0("The root spot id is: ",expl_rootId) })
# download root image and latest update
output$expl_rootImg <-
renderText({
c(
'<img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==expl_rootId],'.jpg alt="root image" height="25%" width="25%"'),
'/>'
)
})
expl_spotData$created_at
runApp()
expl_spotData$created_at[expl_spotData$Spot_ID==input$stationID]
runApp()
c('<div class="container"><img src=',
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==input$stationID],'.jpg alt="root image" width="25%;"'),
'/><div class="bottom-right">',expl_spotData$created_at[expl_spotData$Spot_ID==input$stationID],'</div>'
)
runApp()
paste0('https://files.spotteron.com/images/spots/',expl_spotData$image[expl_spotData$Spot_ID==input$stationID],'.jpg alt="root image" width="25%;"')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
